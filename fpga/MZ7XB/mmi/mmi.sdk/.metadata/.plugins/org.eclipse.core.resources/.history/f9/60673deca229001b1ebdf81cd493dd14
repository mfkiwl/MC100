/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"

#define MII_CTRL0 0x43c00510
#define MII_CTRL1 0x43c00511
#define MII_PHYAD 0x43c00512
#define MII_REGAD 0x43c00513
#define MII_DATA0 0x43c00514
#define MII_DATA1 0x43c00515
#define GPIO_OUTPUT 0x41200000
#define GPIO_OUTPUT2 0x41200008
#define MDIO_ADDR 0x40e007e4
#define MDIO_WR   0x40e007e8
#define MDIO_CTRL 0x40e007f0

volatile uint32_t* gpio_ptr;

void eth_ini(){
	volatile uint32_t *p;
	volatile uint32_t pan;
/*	p = (uint8_t *)MII_CTRL0;
	*p = 9;
	p = (uint8_t *)MII_CTRL1;
	*p = 2;
	p = (uint8_t *)MII_PHYAD;
	*p = 129;
	p = (uint8_t *)MII_REGAD;
	*p = 0;
	p = (uint8_t *)MII_DATA0;
	*p = 0;
	p = (uint8_t *)MII_DATA1;
	*p = 33;*/
	p = (uint32_t*)MDIO_ADDR;
	*p = 0x0020;
	p =(uint32_t*) MDIO_WR;
	*p = 0x2100;
	p = (uint32_t*)MDIO_CTRL;
	*p = 9;
	pan = *p;
	while ((pan & 0x01) == 0x01){
		pan = *p;
	}
}
int main()
{
    init_platform();

    eth_ini();
    gpio_ptr = (uint32_t *)GPIO_OUTPUT;
    *gpio_ptr = 1;
    int sum;
    sum = 0;
    for (int i=0; i<165535;i++){
    	sum+=i;
    }
    if (sum>0){
    	gpio_ptr = (uint32_t *)GPIO_OUTPUT2;
    	*gpio_ptr = 1;
    }


    cleanup_platform();
    return 0;
}
