/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "eeprom.h"
#include "xscugic.h"
#include "xil_exception.h"

#define MII_CTRL0 0x43c00510
#define MII_CTRL1 0x43c00511
#define MII_PHYAD 0x43c00512
#define MII_REGAD 0x43c00513
#define MII_DATA0 0x43c00514
#define MII_DATA1 0x43c00515
#define GPIO_OUTPUT 0x41200000
#define GPIO_OUTPUT2 0x41200008
#define MDIO_ADDR 0x40e007e4
#define MDIO_WR   0x40e007e8
#define MDIO_CTRL 0x40e007f0
#define MDIO_RD   0x40e007ec
#define PDI_CTRL 0x43c00502
#define PDI_STAT 0x43c00503
#define PDI_ADDR 0x43c00504
#define PDI_DATA 0x43c00508
#define ESC_EEPROM_ERROR_MASK 0x78
#define ESC_EEPROM_ERROR_CRC 0x08
#define ESC_EEPROM_SIZE 0x1000
#define ESC_EEPROM_ERROR_CMD_ACK 0x20
#define AL_EVENT_REQ 0x43c00220
#define AL_EVENT_MSK 0x43c00204

#define INT_CFG0_OFFSET 0x00000C00
#define ESC_INT_ID 61
#define INTC_DEVICE_ID          XPAR_PS7_SCUGIC_0_DEVICE_ID
#define INT_TYPE_RISING_EDGE 0x03
#define INT_TYPE_HIGHLEVEL 0x01
#define INT_TYPE_MASK 0x03
static XScuGic INTCInst;
static void ESC_intr_Handler(void *param);
void IntcTypeSetup(XScuGic *InstancePtr, int intId, int intType)
{
	int mask;
    intType &= INT_TYPE_MASK;
    mask = XScuGic_DistReadReg(InstancePtr, INT_CFG0_OFFSET + (intId/16)*4);
    mask &= ~(INT_TYPE_MASK << (intId%16)*2);
    mask |= intType << ((intId%16)*2);
    XScuGic_DistWriteReg(InstancePtr, INT_CFG0_OFFSET + (intId/16)*4, mask);
}
int IntcInitFunction(u16 DeviceId){
	XScuGic_Config *IntcConfig;
	int status;
	IntcConfig = XScuGic_LookupConfig(DeviceId);
	status = XScuGic_CfgInitialize(&INTCInst, IntcConfig, IntcConfig->CpuBaseAddress);
	if(status != XST_SUCCESS) return XST_FAILURE;
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
	                                 (Xil_ExceptionHandler)XScuGic_InterruptHandler,
	                                 &INTCInst);
	Xil_ExceptionEnable();
	status = XScuGic_Connect(&INTCInst,
	                             ESC_INT_ID,
	                             (Xil_ExceptionHandler)ESC_intr_Handler,
	                             (void *)1);
	if(status != XST_SUCCESS) return XST_FAILURE;
	IntcTypeSetup(&INTCInst, ESC_INT_ID, INT_TYPE_HIGHLEVEL);
	XScuGic_Enable(&INTCInst, ESC_INT_ID);
	return XST_SUCCESS;
}

volatile uint32_t* gpio_ptr;
volatile uint32_t *p;
volatile uint32_t pan;
volatile uint8_t* eeprom_ptr;
volatile uint8_t* intr_ptr;
int sum=0;

void eeprom_app(){
	printf("running eeprom_app\n");
	uint8_t eeprom_reg;
	uint32_t eeprom_addr;
	eeprom_ptr = (uint8_t*)PDI_STAT;
	eeprom_reg = *eeprom_ptr;
	printf("eeprom_reg: %x\n",eeprom_reg);
	eeprom_ptr = (uint8_t*)PDI_ADDR;
	eeprom_addr = *eeprom_ptr;
	printf("eeprom_addr0: %x\n",(*eeprom_ptr));
	eeprom_addr = ((*(eeprom_ptr+1))<<8) | eeprom_addr;
	eeprom_addr = eeprom_addr<<1;
	eeprom_reg = eeprom_reg & (~ESC_EEPROM_ERROR_MASK);
	printf("eeprom_addr: %x\n", eeprom_addr);
	if ((eeprom_reg & 0x07)==1){
		if (eeprom_addr < ESC_EEPROM_SIZE) {
			eeprom_ptr = (uint8_t*)PDI_DATA;
			for (int i=0;i<8;i++)
				*(eeprom_ptr+i) = aEepromData[eeprom_addr+i];
		}else{
			eeprom_reg |= ESC_EEPROM_ERROR_CMD_ACK;
		}
	}
	if ((eeprom_reg &0x07)==2){
		if (eeprom_addr < ESC_EEPROM_SIZE){
			eeprom_ptr = (uint8_t*)PDI_DATA;
			aEepromData[eeprom_addr] = *eeprom_ptr;
			aEepromData[eeprom_addr+1] = *(eeprom_ptr+1);
		}else{
			eeprom_reg |= ESC_EEPROM_ERROR_CMD_ACK;
		}
	}
	if ((eeprom_reg & 0x07)==4){
		eeprom_reg &= ~ESC_EEPROM_ERROR_MASK;
		eeprom_ptr = (uint8_t*)PDI_DATA;
		for (int i=0;i<8;i++)
			*(eeprom_ptr+i) = aEepromData[i];
		eeprom_ptr = (uint8_t*)PDI_STAT;
		*eeprom_ptr = eeprom_reg;
		eeprom_ptr = (uint8_t*)PDI_DATA;
		for (int i=0;i<8;i++)
			*(eeprom_ptr+i) = aEepromData[i+8];
	}
	eeprom_ptr = (uint8_t*)PDI_STAT;
	*eeprom_ptr = eeprom_reg;
	printf("end eeprom_app\n");
}
static void ESC_intr_Handler(void *param){
	unsigned int event_req;
	intr_ptr = (uint8_t*)AL_EVENT_REQ;
	event_req = *intr_ptr;
	if ((event_req & 0x20)==0x20)
		eeprom_app();
}
void eth_ini(){
	// set 1000base advertisement
	p = (uint32_t*)MDIO_ADDR;
	*p = 0x0029;
	p =(uint32_t*) MDIO_WR;
	*p = 0x0000;
	p = (uint32_t*)MDIO_CTRL;
	*p = 9;
	pan = *p;
	while ((pan & 0x01) == 0x01){
		pan = *p;
	}
	/////////////////////////////////////////////
	// set advertisement
	p = (uint32_t*)MDIO_ADDR;
	*p = 0x0024;
	p =(uint32_t*) MDIO_WR;
	*p = 0x01e1;
	p = (uint32_t*)MDIO_CTRL;
	*p = 9;
	pan = *p;
	while ((pan & 0x01) == 0x01){
		pan = *p;
	}
	////////////////////////////////////////////
	// set eee
	p = (uint32_t*)MDIO_ADDR;
	*p = 0x002d;
	p = (uint32_t*)MDIO_WR;
	*p = 0x0007;
	p = (uint32_t*)MDIO_CTRL;
	*p = 9;
	pan = *p;
	while ((pan & 0x01) == 0x01){
		pan = *p;
	}
	p = (uint32_t*)MDIO_ADDR;
	*p = 0x002e;
	p = (uint32_t*)MDIO_WR;
	*p = 0x003c;
	p = (uint32_t*)MDIO_CTRL;
	*p = 9;
	pan = *p;
	while ((pan & 0x01) == 0x01){
		pan = *p;
	}
	p = (uint32_t*)MDIO_ADDR;
	*p = 0x002d;
	p = (uint32_t*)MDIO_WR;
	*p = 0x4007;
	p = (uint32_t*)MDIO_CTRL;
	*p = 9;
	while ((pan & 0x01) == 0x01){
		pan = *p;
	}
	for (int i=0; i<165535;i++){
		 sum+=i;
	}
	p = (uint32_t*)MDIO_ADDR;
	*p = 0x002e;
	p = (uint32_t*)MDIO_WR;
	*p = 0x0000;
	p = (uint32_t*)MDIO_CTRL;
	*p = 9;
	while ((pan & 0x01) == 0x01){
		pan = *p;
	}
	for (int i=0; i<165535;i++){
	     sum+=i;
	}
	////////////////////////////////////////////
	// read eee
	p = (uint32_t*)MDIO_ADDR;
	*p = 0x002d;
	p = (uint32_t*)MDIO_WR;
	*p = 0x0007;
	p = (uint32_t*)MDIO_CTRL;
	*p = 9;
	pan = *p;
	while ((pan & 0x01) == 0x01){
		pan = *p;
	}
	p = (uint32_t*)MDIO_ADDR;
	*p = 0x002e;
	p = (uint32_t*)MDIO_WR;
	*p = 0x003c;
	p = (uint32_t*)MDIO_CTRL;
	*p = 9;
	pan = *p;
	while ((pan & 0x01) == 0x01){
		pan = *p;
	}
	p = (uint32_t*)MDIO_ADDR;
	*p = 0x002d;
	p = (uint32_t*)MDIO_WR;
	*p = 0x4007;
	p = (uint32_t*)MDIO_CTRL;
	*p = 9;
	while ((pan & 0x01) == 0x01){
		pan = *p;
	}
	for (int i=0; i<165535;i++){
	     sum+=i;
	}
	p = (uint32_t*)MDIO_ADDR;
	*p = 0x042e;
	p = (uint32_t*)MDIO_CTRL;
	*p = 9;
	while ((pan & 0x01) == 0x01){
		pan = *p;
	}
	p = (uint32_t*)MDIO_RD;
	printf("error count: %x\n",(*p));
	////////////////////////////////////////////
	// restart negotiation
	p = (uint32_t*)MDIO_ADDR;
	*p = 0x0020;
	p =(uint32_t*) MDIO_WR;
	*p = 0x1340;
	p = (uint32_t*)MDIO_CTRL;
	*p = 9;
	pan = *p;
	while ((pan & 0x01) == 0x01){
		pan = *p;
	}
	//////////////////////////////////////////////
    p = (uint32_t*)MDIO_ADDR;
    *p = 0x0421;
    pan = 0;
    while ((pan & 0x20) == 0x00){
    	p = (uint32_t*)MDIO_CTRL;
    	*p = 0x09;
    	pan = *p;
    	while ((pan & 0x01) == 0x01){
    		pan = *p;
    	}
    	p = (uint32_t*)MDIO_RD;
    	pan = *p;
    }


}
int main()
{
    init_platform();
    eth_ini();
    printf("Hello world\n");
    gpio_ptr = (uint32_t *)GPIO_OUTPUT;
    *gpio_ptr = 1;
    sum=0;
    for (int i=0; i<165535;i++){
    	sum+=i;
    }
    IntcInitFunction(INTC_DEVICE_ID);
    if (sum>0){
    	gpio_ptr = (uint32_t *)GPIO_OUTPUT2;
    	*gpio_ptr = 1;
    }
    intr_ptr = (uint8_t*)AL_EVENT_MSK;
    *intr_ptr = 0x20;
    while(1){

    }

    cleanup_platform();
    return 0;
}
